# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#  Copyright 2014 Brainsware
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#
# cobblersystems to unbound transformation
#

# takes an Hash of cobblersystems and transforms them to a Hash of unbound record hashes

# ---- original file header ----
#
# @summary
#   takes an Hash of cobblersystems and transforms them to a Hash of unbound record hashes
#
Puppet::Functions.create_function(:'cobblersystems_to_unbound') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    input = arguments[0]
    output = {}

    get_ip = lambda { |data, key| data['interfaces']['eth0'][key] }

    raise(TypeError, "cobblersystems_to_unbound(): first argument must be a Hash. " +
          "Given an argument of class #{input.class}.") unless input.is_a? Hash

    input.each do |host, data|
      hostname = data['hostname'] || host

      output[hostname] = {
        'ip'   => get_ip[data, 'ip_address'],
        'ipv6' => get_ip[data, 'ipv6_address']
      }
    end

    output
  
  end
end
